x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x, 4:5, [99,99])
x
collect(x)
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x, 4:6, [99,99,99])
x
collect(x)
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x, 3:5, [99,99,99])
collect(x)
exit()
coverage(gr)
import GenomicFeatures.coverage
coverage(gr)
coverage(gr)
splice!(out, 100:101, [99,99])
import Base.splice!
splice!(out, 100:101, [99,99])
splice!(out, 100:101, [99,99])
out
    out = RLEVector(0, last(chr_ends(gr)))
out = RLEVector(0, last(chr_ends(gr)))
splice!(out, 100:101, [99,99])
out = RLEVector(0, last(chr_ends(gr)))
splice!(out, 100:101, [99,99])
out
out = RLEVector(0, last(chr_ends(gr)))
splice!(out, 100:101, [99,99])
out
foo = [1,2,3,4]
splice1(foo, 2:2, 99)
splice!(foo, 2:2, 99)
foo
out
out = RLEVector(0, last(chr_ends(gr)))
out = RLEVector(0, last(chr_ends(gr)))
splice!(out, 100:101, [99,99])
splice!([0],1:0,99)
foo = [0]
splice!(foo,1:0,99)
splice!(foo,0:0,99)
splice!(foo,0:-1,99)
splice!(foo,1:0,99)
splice!(foo,1:0,[99])
?splice!
foo
splice!([1],1:0,[99])
foo = [0]; splice!(foo,1:0,[99])
foo
foo = [0]; splice!(foo,1:-1,[99])
foo
coverage(gr)
coverage(gr)
x = collect(1:10)
x = RLEVector([1,1,2,2,3,3,4,4])
splice1(x,4:4,[99])
splice!(x,4:4,[99])
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,4:4,[99])
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,4:4,[99]); x
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,4:4,[99]); collect(x)
x = RLEVector([1,1,1,2,2,2,3,3,3,4,4,4])
splice!(x,5:5,[99]); collect(x)
coverage(gr)
@time coverage(gr)
@timeit coverage(gr)
@timeit coverage(gr)
Profile.clear(); @profile coverage(gr); Profile.print()
exit()
Pkg.test("RLEVectors")
Pkg.test("RLEVectors")
exit()
Pkg.test("RLEVectors")
Pkg.test("RLEVectors")
Pkg.test("RLEVectors")
x
collect(x)
length(x)
x
collect(x)
collect(x)
collect(x)
length(x)
length(x)
index = 10:9
@which splice!(x,10:9,[9,11])
ins
x = RLEVector([9,11])
ins
x
ins = 10:9
x
x
ins
index = 10:9
ins = RLEVector([9,11])
x
x
ins_ends
ins_vals
collect(x)
collect(x)
run_right
collect(x)
exit()
Pkg.test("RLEVectors")
ins = RLEVector([9,11])
index = 10:9
collect(x)
right_shift
run_right
length(x.runends)
right_run
run_right
right_shift
x.runends
x.runends
index_in_run_left
run_remainder_right
run_left
run_right
nrun(x)
x
collect(x)
x
x
ins
index
x
x
x
index
index
x
run_left
run_right
nrun(x)
index_in_run_left
run_remainder_left
x
index_in_run_left
run_remainder_right
import(Base.splice!)
import Base.splice!
exit()
index = 10:9
ins = RLEVector([9,11])
using RLEVectors
run_left == run_right && index_in_run_left != 1 && run_remainder_right != 0 # gotta fix both ends
ins = RLEVector([9,11])
run_left == run_right && index_in_run_left != 1 && run_remainder_right != 0
index_in_run_left
run_remainder_right
splice!(x,10:9,[9,11]) == similar(x,0)
x
?searchsortedfirst
x
ind2runcontext(x, 4:5)
@timeit coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
Profile.clear(); @profile coverage(gr); Profile.print()
@time coverage(gr)
Profile.clear(); @profile coverage(gr); Profile.print()
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
Profile.clear(); @profile coverage(gr); Profile.print()
Profile.clear(); @profile coverage(gr); Profile.print()
@time coverage(gr)
?insert!
?append!
?insert
?insert!
Base.insert!
?Base.insert!
@time coverage(gr)
Pkg.test("RLEVectors")
exit()
Pkg.test("RLEVectors")
x
x = RLEVector([1,1,2,2,3,3,4,4])
using RLEVectors
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,3:4)
x = RLEVector([1,1,2,2,3,3,4,4])
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,3:5)
splice!(x,1:0,[9,11])
index = 1:0
ins = RLEVector([9,11])
i_left
i_right
widths(x)
start(1:0)
last(1:0)
first(1:0)
max(1:0)
maximum(1:0)
maximum(1,0)
max(1,0)
maximum(1:0)
max(1:0)
exit()
Pkg.test("RLEVectors")
splice!(x,1:0,[9,11])
index = 1:0
ins = RLEVector([9,11])
current
exit()
Pkg.test("RLEVectors")
ind2runcontext(RLEVector([3,3,4,4,5,5,6,6,7,7]),7:9)
i = 7:9
rle = RLEVector([3,3,4,4,5,5,6,6,7,7])
exit()
Pkg.test("RLEVectors")
xd
xr
splice!(xr,9:10,[9,11])
splice!(xd,9:10,[9,11])
@which splice!(xd,9:10,[9,11])
splice!(xr,9:10,[9,11])
splice!(xd,9:10,[9,11])
?growat!
?Base.growa!
?Base.growat!
?resize!
?resize!
1:4 + 5
(1:4) + 5
?insert!
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,4:5,[9,11])
x
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,7:8,[9,11])
x
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,1:0,[9,11])
x
x = RLEVector([1,1,2,2,3,3,4,4])
nrun(x)
length(x)
ind2runcontext(x,22)
ind2runcontext(x,10)
length(x)
ind2runcontext(x,8)
ind2runcontext(x,9)
import(Base.splice!)
import Base.splice!
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,1:0,[9,11])
x
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,1:0,[9,11])
x = RLEVector([1,1,2,2,3,3,4,4])
index = 4:5
ins = RLEVector([9,9])
collect(current)
ins
index
x
x.runends
nrun_out
nrun(x)
nrun_x
run_range
length(run_range)
index
rnun(ins)
nrun(ins)
collect(x)
x = RLEVector([1,1,2,2,3,3,4,4])
collect(x)
run_left
run_right
run_range
length(run_range)
length(run_range)
x = RLEVector([1,1,2,2,3,3,4,4])
run_right
run_range
run_range + 1
x = RLEVector([1,1,2,2,3,3,4,4])
ins.runvalues
run_right:nrun_x
x
run_range + 1
run_range
x = RLEVector([1,1,2,2,3,3,4,4])
collect(x)
x.runvalues[run_right:nrun_x]
x = RLEVector([1,1,2,2,3,3,4,4])
x.runvalues[run_right:nrun_x]
((nrun_out - run_right) + 1):end
((nrun_out - run_right) + 1):nrun_out
((nrun_out - run_right)):nrun_out
((nrun_out - run_right) + 1):nrun_out
((nrun_out - run_right) + 2):nrun_out
nrun_x
nrun_x - right_run
nrun_x - run_right
x = RLEVector([1,1,2,2,3,3,4,4])
x.runvalues[run_right:nrun_x]
((nrun_x - run_right) + 1):nrun_out
nrun_x - run_right
nrun_x - run_right
nrun_x - run_right + 1
nrun_x
nrun_out - nrun_x
run_right + (nrun_out - nrun_x)
x
nrun_x
nrun_out
x = RLEVector([1,1,2,2,3,3,4,4])
collect(x)
x = RLEVector([1,1,2,2,3,3,4,4])
x.runvalues
x.runvalues
x = RLEVector([1,1,2,2,3,3,4,4])
x = RLEVector([1,1,2,2,3,3,4,4])
ins
index
run_range
x = RLEVector([1,1,2,2,3,3,4,4])
x
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
cumsum!([1,2,3])
?cumsum!
?cumsum
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
x = RLEVector([1,1,2,2,3,3,4,4])
nrun(ins)
(run_left + 1):(run_left + 1 + nrun(ins))
x.runvalues
x = RLEVector([1,1,2,2,3,3,4,4])
x
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,1:0,[9,11])
x
collect(x)
x = RLEVector([1,1,2,2,3,3,4,4])
x
run_left
index_in_run_left
x = RLEVector([1,1,2,2,3,3,4,4])
x.runends
x
x = RLEVector([1,1,2,2,3,3,4,4])
nrun_x
nrun_ins
nrun(ins)
run_left == run_right
x = RLEVector([1,1,2,2,3,3,4,4])
x
x = RLEVector([1,1,2,2,3,3,4,4])
x
x
x = RLEVector([1,1,2,2,3,3,4,4])
x
x
@time coverage(gr)
?cumsum!
x = RLEVector([1,1,2,2,3,3,4,4])
x
x = RLEVector([1,1,2,2,3,3,4,4])
x = RLEVector([1,1,2,2,3,3,4,4])
x
x
run_range
x = RLEVector([1,1,2,2,3,3,4,4])
x
run_left
run_right
x = RLEVector([1,1,2,2,3,3,4,4])
x
run_left
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
Profile.clear(); @profile coverage(gr); Profile.print()
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,1:0,[9,11])
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,1:0,[9,11])
@time coverage(gr)
x = RLEVector([1,1,2,2,3,3,4,4])
@time width(x)
@time widths(x)
@time widths(x)
@timeit widths(x)
@timeit widths(x)
Profile.clear(); @profile width(x); Profile.print()
Profile.clear(); @profile widths(x); Profile.print()
@timeit widths(x)
@timeit widths(x)
import RLEVectors.widths
@timeit widths(x)
@timeit widths(x)
@timeit widths(x)
@timeit widths(x)
@timeit widths(x)
@timeit widths(x)
@timeit widths(x)
@timeit widths(x)
@timeit widths(x)
@timeit widths(x)
Pkg.test("RLEVectors")
index = 1:0
ins = RLEVector([9,11])
current
x
index
length(index)
x
splice!(xd,9:10,[9,11])
collect(splice!(xr,9:10,[9,11]))
x = xr
index = 9:10
ins = [9,11]
run_range
current
run_remainder_right
x.runends[run_range]
run_range
index_in_run_left
x.runends[run_range]
run_remainder_right
current
xr
run_left
run_right
nrun_ins
x = xr
nrun_x
nrun(ins)
ins = RLEVector([9,11])
index = 9:10
nrun(ins)
run_left == run_right
length(run_range)
run_left
run_right
ins
index
x
xr
ins
index
nrun(x)
run_left
run_right
collect(x)
using RLEVectors
using Base.Test
x = xr
ins = RLEVector([9,11])
index = 9:10
x.runends
nrun_out
x.runends
nrun_x
nrun(ins)
run_left == run_right
length(run_range)
nrun_x
nrun(ins)
nrun_out
using RLEVectors
import Base.splice!
exit()
Pkg.test("RLEVectors")
Pkg.test("RLEVectors")
Pkg.test("RLEVectors")
exit()
