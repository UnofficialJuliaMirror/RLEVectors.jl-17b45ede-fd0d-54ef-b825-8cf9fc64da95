first(10:9)
x[2:3]
x[2:3]
x
collect(x)
collect(x)[2:3]
x[4:6]
collect(x)[4:6]
@timeit coverage(gr)
@timeit gr[900:920]
Profile.clear()
@profile for i in 1:100 coverage(gr) end
coverage(gr)
@time coverage(gr)
Profile.clear()
@profile coverage(gr)
Profile.print()
exit()
using RLEVectors
using GenomicVectors
@time coverage(gr)
@timeit coverage(gr)
@timeit coverage(gr)
Profile.clear()
@profile for i in 1:100 coverage(gr) end; Profile.print()
@timeit coverage(gr)
import GenomicFeatures.coverage
@timeit coverage(gr)
eachrange(gr)
sort(eachrange(gr))
sort(collect(eachrange(gr)))
@timeit coverage(gr)
Profile.clear()
coverage(gr)
@profile for i in 1:100 coverage(gr) end; Profile.print()
@timeit coverage(gr)
Profile.clear(); @profile for i in 1:100 coverage(gr) end; Profile.print()
foo=first(eachrange(gr))
foo
1:10 + 1
(1:10) + 1
(s,e) = foo
s
e
s:e
(s,e) = first(eachrange(gr))
coverage(gr)
x[1:4]=12
x=RLEVector([1,1,1,1,1,2,2,2,2,4])
x[1:4]=12
coverage(gr)
coverage(gr)
coverage(gr)
coverage(gr)
gr
coverage(gr)
@which setindex!(x,4,1:3)
@which setindex!(x,4,(1,3))
setindex!(x,4,(1,3))
x
coverage(gr)
coverage(gr)
exit()
using GenomicVectors
@timeit coverage(gr)
Profile.clear()
@profile for i in 1:100 coverage(gr) end; Profile.print()
@timeit coverage(gr)
import GenomicFeatures.coverage
@timeit coverage(gr)
using RLEVectors
@timeit coverage(gr)
coverage(gr)
Profile.clear()
@profile for i in 1:100 coverage(gr) end; Profile.print()
Profile.clear()
@profile for i in 1:100 coverage(gr) end; Profile.print()
coverage(gr)
@timeit coverage(gr)
x
x = RLEVector([1,1,1,2,2,2,7,7,7,8])
@which setindex!(x,4,1:3)
@which setindex!(x,[1,1,1],1:3)
@which setindex!(x,RLEVector(1,1,1]),1:3)
@which setindex!(x,RLEVector([1,1,1]),1:3)
@which .+(x,1)
@which +.(x,1)
@which broadcast(x,+,1)
@which setindex!(x,[1,1,1],1:3)
coverage(gr)
@timeit coverage(gr)
1.5/8
?splice!
exit()
coverage(gr)
@timeit coverage(gr)
x = RLEVector(collect(1:10))
using RLEVectors
x = RLEVector(collect(1:10))
x[3:3] = [99,100]
x
length(x)
x = RLEVector(collect(1:10))
length(x)
x[3:2] = [99,100]
length(x)
x
@timeit coverage(gr)
x = 1:10
x[4:6]
x = RLEVector(1:10)
x = RLEVector(collect(1:10))
ind2run(x,4:5)
x = RLEVector([1,1,2,2,3,3])
ind2run(x,4:5)
x[[4,5]]
x[4:5]
ind2run(x,4:5)
ind2runcontext(x,4:5)
?ind2runcontext
collect(x)
?splice!
?push!
exit()
using RLEVectors
?ind2run
?ind2runcontext
?ind2runcontext
ind2run(x, 4:5)
x =  RLEVector(collect(1:10))
ind2run(x, 4:5)
inds = 4:5
last(inds)
x[4:6]
function Base.getindex(rle::RLEVector, ind::UnitRange)
    run_indices = ind2run(rle, ind)
    vals = values(rle, run_indices)
    ends = runends(rle, run_indices)
    ends[end] = last(inds)
    ends = ends - (first(inds) - 1)
    RLEVector(vals, ends)
end

x[4:6]
exit()
using RLEVectors
x =  RLEVector(collect(1:10))
x[4:6]
x[4:6]
ends(x)
x[4:6]
x[4:6]
x[4:6]
x[4:6]
x = RLEVector([1,1,2,2,3,3,4,4,5,5])
x[4:5]
x[4:6]
@timeit coverage(gr)
coverage(gr)
exit()
using RLEVectors
x = RLEVector([1,1,2,2,3,3,4,4,5,5])
?Union
import Base.splice!
x
splice!(x, 4, 99)
exit()
using RLEVectors
x = RLEVector([1,1,2,2,3,3,4,4,5,5])
splice!(x, 4, 98)
splice!(x, 4:5, 98)
splice!(x, 4:5, 98)
splice!(x, 4:5, 98:99)
splice!(x, 4:5, [99,99])
exit()
using RLEVectors
x = RLEVector([1,1,2,2,3,3,4,4,5,5])
splice!(x, 4:5, [99,99])
x
splice!(x, 2, [99,99])
x
coverage(gr)
gr
exit()
coverage(gr)
import GenomicFeatures.coverage
coverage(gr)
widths(gr)[1]
coverage(gr)
(s,e) = first(eachrange(gr))
out[r]
@which setindex!(out, r, out[r])
foo = out[r]
foo
@which setindex!(out, r, foo)
setindex!(out, r, foo)
out
typeof(out)
typeof(foo)
@which setindex!(out, r, foo)
@which splice!(out, r, foo)
splice!(out, r, foo)
splice!(out, r, foo)
splice!(out, r, foo)
out
@which splice!(out, foo, r)
@which setindex!(out, foo, r)
index = r
ins = out[r] + 1
x
x = ou
x = out
ins
ins
ins_ends
ins_vals
out
r
out[r]
foo = out[r] + 1
out[r] = foo
out
all_ranges = collect(eachrange(gr))
(s,e) = all_ranges[1]
out
out
print(out)
coverage(gr)
out
print(out)
coverage(gr)
coverage(gr)
coverage(gr)
out
r
@which splice!(out, r, out[r] + 1)
out
(s,e) = all_ranges[1]
x = out
r = s:e
index = r
ins = out[r] + 1
ins
length(ins)
length(index)
i_left > i_right # Insert without removing
current
3080432725 + 3326
length(out)
3080432676 + 3375
[[4,5,6]; [12]]
vcat([4,5,6], [12])
ins_ends
ins
r
coverage(gr)
coverage(gr)
coverage(gr)
exit()
coverage(gr)
@timeit coverage(gr)
coverage(gr)
@time coverage(gr)
Profile.clear(); @profile coverage(gr); Profile.print()
gr
@timeit coverage(gr)
bob = [1,2,3]
bob[0] =  12
import Base.splice!
@timeit coverage(gr)
x
x = RLEVector(collect(1:10))
splice!(x, 4:5, [99])
x
x = RLEVector(collect(1:10))
splice!(x, 4:5, [99,99])
x
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x, 4:5, [99,99])
x
collect(x)
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x, 4:6, [99,99,99])
x
collect(x)
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x, 3:5, [99,99,99])
collect(x)
exit()
coverage(gr)
import GenomicFeatures.coverage
coverage(gr)
coverage(gr)
splice!(out, 100:101, [99,99])
import Base.splice!
splice!(out, 100:101, [99,99])
splice!(out, 100:101, [99,99])
out
    out = RLEVector(0, last(chr_ends(gr)))
out = RLEVector(0, last(chr_ends(gr)))
splice!(out, 100:101, [99,99])
out = RLEVector(0, last(chr_ends(gr)))
splice!(out, 100:101, [99,99])
out
out = RLEVector(0, last(chr_ends(gr)))
splice!(out, 100:101, [99,99])
out
foo = [1,2,3,4]
splice1(foo, 2:2, 99)
splice!(foo, 2:2, 99)
foo
out
out = RLEVector(0, last(chr_ends(gr)))
out = RLEVector(0, last(chr_ends(gr)))
splice!(out, 100:101, [99,99])
splice!([0],1:0,99)
foo = [0]
splice!(foo,1:0,99)
splice!(foo,0:0,99)
splice!(foo,0:-1,99)
splice!(foo,1:0,99)
splice!(foo,1:0,[99])
?splice!
foo
splice!([1],1:0,[99])
foo = [0]; splice!(foo,1:0,[99])
foo
foo = [0]; splice!(foo,1:-1,[99])
foo
coverage(gr)
coverage(gr)
x = collect(1:10)
x = RLEVector([1,1,2,2,3,3,4,4])
splice1(x,4:4,[99])
splice!(x,4:4,[99])
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,4:4,[99])
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,4:4,[99]); x
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,4:4,[99]); collect(x)
x = RLEVector([1,1,1,2,2,2,3,3,3,4,4,4])
splice!(x,5:5,[99]); collect(x)
coverage(gr)
@time coverage(gr)
@timeit coverage(gr)
@timeit coverage(gr)
Profile.clear(); @profile coverage(gr); Profile.print()
exit()
Pkg.test("RLEVectors")
Pkg.test("RLEVectors")
exit()
Pkg.test("RLEVectors")
Pkg.test("RLEVectors")
Pkg.test("RLEVectors")
x
collect(x)
length(x)
x
collect(x)
collect(x)
collect(x)
length(x)
length(x)
index = 10:9
@which splice!(x,10:9,[9,11])
ins
x = RLEVector([9,11])
ins
x
ins = 10:9
x
x
ins
index = 10:9
ins = RLEVector([9,11])
x
x
ins_ends
ins_vals
collect(x)
collect(x)
run_right
collect(x)
exit()
Pkg.test("RLEVectors")
ins = RLEVector([9,11])
index = 10:9
collect(x)
right_shift
run_right
length(x.runends)
right_run
run_right
right_shift
x.runends
x.runends
index_in_run_left
run_remainder_right
run_left
run_right
nrun(x)
x
collect(x)
x
x
ins
index
x
x
x
index
index
x
run_left
run_right
nrun(x)
index_in_run_left
run_remainder_left
x
index_in_run_left
run_remainder_right
import(Base.splice!)
import Base.splice!
exit()
index = 10:9
ins = RLEVector([9,11])
using RLEVectors
run_left == run_right && index_in_run_left != 1 && run_remainder_right != 0 # gotta fix both ends
ins = RLEVector([9,11])
run_left == run_right && index_in_run_left != 1 && run_remainder_right != 0
index_in_run_left
run_remainder_right
splice!(x,10:9,[9,11]) == similar(x,0)
x
?searchsortedfirst
x
ind2runcontext(x, 4:5)
@timeit coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
Profile.clear(); @profile coverage(gr); Profile.print()
@time coverage(gr)
Profile.clear(); @profile coverage(gr); Profile.print()
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
Profile.clear(); @profile coverage(gr); Profile.print()
Profile.clear(); @profile coverage(gr); Profile.print()
@time coverage(gr)
?insert!
?append!
?insert
?insert!
Base.insert!
?Base.insert!
@time coverage(gr)
Pkg.test("RLEVectors")
exit()
Pkg.test("RLEVectors")
x
x = RLEVector([1,1,2,2,3,3,4,4])
using RLEVectors
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,3:4)
x = RLEVector([1,1,2,2,3,3,4,4])
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,3:5)
splice!(x,1:0,[9,11])
index = 1:0
ins = RLEVector([9,11])
i_left
i_right
widths(x)
start(1:0)
last(1:0)
first(1:0)
max(1:0)
maximum(1:0)
maximum(1,0)
max(1,0)
maximum(1:0)
max(1:0)
exit()
Pkg.test("RLEVectors")
splice!(x,1:0,[9,11])
index = 1:0
ins = RLEVector([9,11])
current
exit()
Pkg.test("RLEVectors")
ind2runcontext(RLEVector([3,3,4,4,5,5,6,6,7,7]),7:9)
i = 7:9
rle = RLEVector([3,3,4,4,5,5,6,6,7,7])
exit()
