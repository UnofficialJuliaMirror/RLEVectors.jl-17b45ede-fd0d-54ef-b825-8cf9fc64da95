foo
foo
exit()
1:2:20
collect(1:2:20)
collect(2:2:20)
[ mean(x[ r ]) for r in ranges ]
[ mean(x[ r ]) for r in ranges ]
length(x)
length(y)
[ mean(x[ r ]) for r in ranges ]
typeof(ranges)
isa( ranges, Vector{UnitRange} )
isa( Vector{UnitRange},  ranges )
import RLEVectors::rangeMeans
exit()
using RLEVectors
isa( Vector{UnitRange},  ranges )
UnitRange
exit()
x ^ 2
x .^ 2
RLEVector( [2, 3, 4, 4, 8, 8] )
RLEVector( [0, 0, 0, 0, 0, 0] )
x - x
exit()
x = RLEDataFrame( [:a, :b, :c], RLEVector([1,1,2,2]), RLEVector([4,4,4,4]), RLEVector([9,8,7,4]) )
RLEVectors.RLEDataFrame( [:a, :b, :c], RLEVector([1,1,2,2]), RLEVector([4,4,4,4]), RLEVector([9,8,7,4]) )
RLEVectors.RLEDataFrame( [:a, :b, :c], RLEVector([1,1,2,2]), RLEVector([4,4,4,4]), RLEVector([9,8,7,4]) )
RLEVectors.RLEDataFrame( [:a, :b, :c], RLEVector([1,1,2,2]), RLEVector([4,4,4,4]), RLEVector([9,8,7,4]) )
using RLEVectors
RLEVectors.RLEDataFrame( [:a, :b, :c], RLEVector([1,1,2,2]), RLEVector([4,4,4,4]), RLEVector([9,8,7,4]) )
RLEVectors.RLEDataFrame( [:a, :b, :c], RLEVector([1,1,2,2]), RLEVector([4,4,4,4]), RLEVector([9,8,7,4]) )
exit()
using RLEVectors
RLEVectors.RLEDataFrame( [:a, :b, :c], RLEVector([1,1,2,2]), RLEVector([4,4,4,4]), RLEVector([9,8,7,4]) )
exit()
using RLEVectors
RLEVectors.RLEDataFrame( [:a, :b, :c], RLEVector([1,1,2,2]), RLEVector([4,4,4,4]), RLEVector([9,8,7,4]) )
 exit()
