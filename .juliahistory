foo
foo
exit()
1:2:20
collect(1:2:20)
collect(2:2:20)
[ mean(x[ r ]) for r in ranges ]
[ mean(x[ r ]) for r in ranges ]
length(x)
length(y)
[ mean(x[ r ]) for r in ranges ]
typeof(ranges)
isa( ranges, Vector{UnitRange} )
isa( Vector{UnitRange},  ranges )
import RLEVectors::rangeMeans
exit()
using RLEVectors
isa( Vector{UnitRange},  ranges )
UnitRange
exit()
x ^ 2
x .^ 2
RLEVector( [2, 3, 4, 4, 8, 8] )
RLEVector( [0, 0, 0, 0, 0, 0] )
x - x
exit()
x = RLEDataFrame( [:a, :b, :c], RLEVector([1,1,2,2]), RLEVector([4,4,4,4]), RLEVector([9,8,7,4]) )
RLEVectors.RLEDataFrame( [:a, :b, :c], RLEVector([1,1,2,2]), RLEVector([4,4,4,4]), RLEVector([9,8,7,4]) )
RLEVectors.RLEDataFrame( [:a, :b, :c], RLEVector([1,1,2,2]), RLEVector([4,4,4,4]), RLEVector([9,8,7,4]) )
RLEVectors.RLEDataFrame( [:a, :b, :c], RLEVector([1,1,2,2]), RLEVector([4,4,4,4]), RLEVector([9,8,7,4]) )
using RLEVectors
RLEVectors.RLEDataFrame( [:a, :b, :c], RLEVector([1,1,2,2]), RLEVector([4,4,4,4]), RLEVector([9,8,7,4]) )
RLEVectors.RLEDataFrame( [:a, :b, :c], RLEVector([1,1,2,2]), RLEVector([4,4,4,4]), RLEVector([9,8,7,4]) )
exit()
using RLEVectors
RLEVectors.RLEDataFrame( [:a, :b, :c], RLEVector([1,1,2,2]), RLEVector([4,4,4,4]), RLEVector([9,8,7,4]) )
exit()
using RLEVectors
RLEVectors.RLEDataFrame( [:a, :b, :c], RLEVector([1,1,2,2]), RLEVector([4,4,4,4]), RLEVector([9,8,7,4]) )
 exit()
using RLEVectors
exit()
using RLEVectors
x = RLEVector([1, 1, 2, 2])
y = RLEVector([1, 1, 2, 4])
(x, y)
convert((x, y), Vector)
convert(Vector, (x, y))
Vector{RLEVector}( (x, y) )
Vector{RLEVector}( (x, y)... )
rles = (x, y)
Vector{RLEVector}( rles... )
Vector( rles... )
exit()
using RLEVectors
x = RLEVector([1, 1, 2, 2])
y = RLEVector([1, 1, 2, 4])
RLEDataFrame( [:a, :b], x, y)
rles = [x, y]
RLEVectorList( rles... )
typealias RLEVectorList{T1,T2} Vector{ RLEVector{T1,T2} }
RLEVectorList( rles... )
RLEVectorList( x, y)
RLEVectorList[ x, y]
x
y
x = RLEVectorList()
Symbol[]
?push!
exit()
using RLEVectors
exit()
using RLEVectors
RLEDataFrame( a=RLEVector([1, 1, 2]), b=RLEVector([2, 2, 2]) )
rles = RLEVectorList{Int64,Int64}()
pairs = (a=RLEVector([1, 1, 2]), b=RLEVector([2, 2, 2]))
pairs = Dict(a=RLEVector([1, 1, 2]), b=RLEVector([2, 2, 2]))
pairs = Dict(a=>RLEVector([1, 1, 2]), b=>RLEVector([2, 2, 2]))
push!(names, :a)
push!(rles, RLEVector([1, 1, 2]))
exit()
using RLEVectors
x = RLEVector([1, 1, 2, 2])
y = RLEVector([1, 1, 2, 4])
RLEDataFrame(a=x, b=y)
exit()
using RLEVectors
x = RLEVector([1, 1, 2, 2])
y = RLEVector([1, 1, 2, 4])
RLEDataFrame(a=x, b=y)
RLEDataFrame(:a=x, :b=y)
RLEDataFrame(a=x, b=y)
exit()
x
pop!(x)
RLEVector{Int64, Int64}()
RLEVector(Int64[])
x
RLEVector(Int64[])
exit()
