cumsum!([1,2,3])
?cumsum!
?cumsum
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
x = RLEVector([1,1,2,2,3,3,4,4])
nrun(ins)
(run_left + 1):(run_left + 1 + nrun(ins))
x.runvalues
x = RLEVector([1,1,2,2,3,3,4,4])
x
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,1:0,[9,11])
x
collect(x)
x = RLEVector([1,1,2,2,3,3,4,4])
x
run_left
index_in_run_left
x = RLEVector([1,1,2,2,3,3,4,4])
x.runends
x
x = RLEVector([1,1,2,2,3,3,4,4])
nrun_x
nrun_ins
nrun(ins)
run_left == run_right
x = RLEVector([1,1,2,2,3,3,4,4])
x
x = RLEVector([1,1,2,2,3,3,4,4])
x
x
x = RLEVector([1,1,2,2,3,3,4,4])
x
x
@time coverage(gr)
?cumsum!
x = RLEVector([1,1,2,2,3,3,4,4])
x
x = RLEVector([1,1,2,2,3,3,4,4])
x = RLEVector([1,1,2,2,3,3,4,4])
x
x
run_range
x = RLEVector([1,1,2,2,3,3,4,4])
x
run_left
run_right
x = RLEVector([1,1,2,2,3,3,4,4])
x
run_left
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
Profile.clear(); @profile coverage(gr); Profile.print()
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,1:0,[9,11])
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
@time coverage(gr)
x = RLEVector([1,1,2,2,3,3,4,4])
splice!(x,1:0,[9,11])
@time coverage(gr)
x = RLEVector([1,1,2,2,3,3,4,4])
@time width(x)
@time widths(x)
@time widths(x)
@timeit widths(x)
@timeit widths(x)
Profile.clear(); @profile width(x); Profile.print()
Profile.clear(); @profile widths(x); Profile.print()
@timeit widths(x)
@timeit widths(x)
import RLEVectors.widths
@timeit widths(x)
@timeit widths(x)
@timeit widths(x)
@timeit widths(x)
@timeit widths(x)
@timeit widths(x)
@timeit widths(x)
@timeit widths(x)
@timeit widths(x)
@timeit widths(x)
Pkg.test("RLEVectors")
index = 1:0
ins = RLEVector([9,11])
current
x
index
length(index)
x
splice!(xd,9:10,[9,11])
collect(splice!(xr,9:10,[9,11]))
x = xr
index = 9:10
ins = [9,11]
run_range
current
run_remainder_right
x.runends[run_range]
run_range
index_in_run_left
x.runends[run_range]
run_remainder_right
current
xr
run_left
run_right
nrun_ins
x = xr
nrun_x
nrun(ins)
ins = RLEVector([9,11])
index = 9:10
nrun(ins)
run_left == run_right
length(run_range)
run_left
run_right
ins
index
x
xr
ins
index
nrun(x)
run_left
run_right
collect(x)
using RLEVectors
using Base.Test
x = xr
ins = RLEVector([9,11])
index = 9:10
x.runends
nrun_out
x.runends
nrun_x
nrun(ins)
run_left == run_right
length(run_range)
nrun_x
nrun(ins)
nrun_out
using RLEVectors
import Base.splice!
exit()
Pkg.test("RLEVectors")
Pkg.test("RLEVectors")
Pkg.test("RLEVectors")
exit()
Pkg.test("RLEVectors")
Pkg.test("RLEVectors")
exit()
Pkg.test("RLEVectors")
Pkg.test("RLEVectors")
bdf
bdf[:,10:end]
exit()
Pkg.test("RLEVectors")
bdf
bdf[:,11:21]
x = RLEVector([1,2,3,4,5])
x = RLEVector([1,1,1,2,2,2,3,3,3,4,4,4])
x[5] = 99
x[5] = 99
x
x = RLEVector([1,1,1,2,2,2,3,3,3,4,4,4])
x[5] = 99
x
x[5] = 99
x
x = RLEVector([1,1,1,2,2,2,3,3,3,4,4,4])
x[5] = 99
x = RLEVector([1,1,1,2,2,2,3,3,3,4,4,4])
x[5] = 99
x
?insert!
insert!(collect(1:10), 5 [99,100])
insert!(collect(1:10), 5, [99,100])
x = collect(1:10)
insert!(x, 5, [99,100])
insert!(x, 5, 99, 100)
x = RLEVector([1,1,1,2,2,2,3,3,3,4,4,4])
x[5] = 99
x
using RLEVectors
x = collect(1:100)
Profile.clear(); @profile for i in 1:100 ree(x) end; Profile.print()
Profile.clear(); @profile for i in 1:1000 ree(x) end; Profile.print()
Profile.clear(); @profile for i in 1:10000 ree(x) end; Profile.print()
Profile.clear(); @profile for i in 1:100000 ree(x) end; Profile.print()
Profile.clear(); @profile for i in 1:1000000 ree(x) end; Profile.print()
exit9
exit()
using RLEVectors
Profile.clear(); @profile for i in 1:1000000 ree(x) end; Profile.print()
x = collect(1:100)
Profile.clear(); @profile for i in 1:1000000 ree(x) end; Profile.print()
Profile.clear(); @profile for i in 1:1000000 ree(x) end; Profile.print()
Profile.clear(); @profile for i in 1:1000000 ree(x) end; Profile.print()
bdf[:,11:end]
bf
bdf
Profile.clear(); @profile for i in 1:1000 x = foo; x[100:110] = [1,2,3,4,5,6,7,8,9,10]; end; Profile.print()
Profile.clear(); @profile for i in 1:1000 x = foo; x[100:109] = [1,2,3,4,5,6,7,8,9,10]; end; Profile.print()
Profile.clear(); @profile for i in 1:10000 x = foo; x[100:109] = [1,2,3,4,5,6,7,8,9,10]; end; Profile.print()
Profile.clear(); @profile for i in 1:100000 x = foo; x[100:109] = [1,2,3,4,5,6,7,8,9,10]; end; Profile.print()
Profile.clear(); @profile for i in 1:100000 x = foo; x[100:109] = [1,2,3,4,5,6,7,8,9,10]; end; Profile.print()
@time for i in 1:100000 x = foo; x[100:109] = [1,2,3,4,5,6,7,8,9,10]; end;
@time for i in 1:100000 x = foo; x[100:109] = [1,2,3,4,5,6,7,8,9,10]; end;
@time for i in 1:100000 x = foo; x[100:109] = [1,2,3,4,5,6,7,8,9,10]; end;
@time for i in 1:100000 x = foo; x[100:109] = [1,2,3,4,5,6,7,8,9,10]; end;
@time for i in 1:100000 x = foo; x[100:109] = [1,2,3,4,5,6,7,8,9,10]; end;
@time for i in 1:100000 x = foo; x[100:109] = [1,2,3,4,5,6,7,8,9,10]; end;
@time for i in 1:100000 x = foo; x[100:109] = [1,2,3,4,5,6,7,8,9,10]; end;
@time for i in 1:100000 x = foo; x[100:109] = [1,2,3,4,5,6,7,8,9,10]; end;
@time for i in 1:100000 x = foo; x[100:109] = [1,2,3,4,5,6,7,8,9,10]; end;
Profile.clear(); @profile for i in 1:100000 x = foo; x[100:109] = [1,2,3,4,5,6,7,8,9,10]; end; Profile.print()
@timeit coverage(gr)
@timeit coverage(gr)
@timeit coverage(gr)
bdf[:,10:end]
8.2 / .75
x = collect(1:10)
growat!(x, 3, 2)
x
x = collect(1:10)
growat!(x, 3, 2)
x = collect(1:10)
i = 3
insert_length = 2
length(x)
x = collect(1:10)
x = collect(1:10)
growat!(x, 3, 2)
Pkg.test("RLEVectors")
Pkg.test("RLEVectors")
Pkg.test("RLEVectors")
function growat!(x::AbstractVector, i, insert_length)
    len = length(x)
    resize!(x, len + insert_length)
    @inbounds x[(i + insert_length):end] = x[i:len]
    x
end

function growat!(x::RLEVector, i, insert_length)
    len = nrun(x)
    resize!(x.runvalues, len + insert_length)
    resize!(x.runends, len + insert_length)
    @inbounds x.runvalues[(i + insert_length):end] = x[i:len]
    @inbounds x.runends[(i + insert_length):end] = x[i:len]
    x
end

exit()
using RLEVectors
x
x
x
x
x
x = x.runvalues
i = 2
insert_length = 2
x
methods(growat!)
function growat!(x::AbstractVector, i, insert_length)
    len = length(x)
    resize!(x, len + insert_length)
    @inbounds x[(i + insert_length):end] = x[i:len]
    x
end

function growat!(x::RLEVector, i, insert_length)
    growat!(x.runvalues, i, insert_length)
    growat!(x.runends, i, insert_length)
    x
end

x
@which growat!(x, 2, 2)
@which growat!(x.runends, 2, 2)
@which growat!(x.runends, 2, 1)
x = x.runends
i = 2
insert_length = 1
i + insert_length
x
x
x
RLEVectors.growat!(x, 2, 2)
exit9
exit9
exit()
x
x
?deleteat!
@timeit setindex!(x, 99, 800:820)
@timeit setindex!(foo, 99, 800:820)
@timeit setindex!(foo, 99, 800:820)
@timeit setindex!(foo, 99, 800:820)
bdf
bdf
bdf
Profile.clear(); @profile foo[800:820] =  4; Profile.print()
@timeit setindex!(foo, 99, 800:820)
@timeit setindex!(foo, 99, 800:820)
@timeit setindex!(foo, 800:820, 800:820)
@timeit setindex!(foo, 800:820, 800:820)
Profile.clear(); @profile foo[800:820] =  800:820; Profile.print()
Profile.clear(); @profile for i in 1:100 foo[800:820] =  800:820; end; Profile.print()
Profile.clear(); @profile for i in 1:1000 foo[800:820] =  800:820; end; Profile.print()
Profile.clear(); @profile for i in 1:10000 foo[800:820] =  800:820; end; Profile.print()
Profile.clear(); @profile for i in 1:100000 foo[800:820] =  800:820; end; Profile.print()
Profile.clear(); @profile for i in 1:1000000 foo[800:820] =  800:820; end; Profile.print()
Profile.clear(); @profile for i in 1:10000000 foo[800:820] =  800:820; end; Profile.print()
x = RLEVector([1,1,2,2,3,3])
bob=800:820; Profile.clear(); @profile for i in 1:10000000 foo[bob] = bob; end; Profile.print()
bob=800:820; Profile.clear(); @profile for i in 1:10000000 foo[bob] = bob; end; Profile.print()
bob=800:820; joe=RLEVector(800:820); Profile.clear(); @profile for i in 1:10000000 foo[bob] = joe; end; Profile.print()
exit()
Profile.clear(); @profile for i in 1:10000000 foo[800:820] =  800:820; end; Profile.print()
bob=800:820; joe=RLEVector(800:820); Profile.clear(); @profile for i in 1:10000000 foo[bob] = joe; end; Profile.print()
Pkg.test("RLEVectors")
exit()
bob=800:820; joe=RLEVector(800:820); Profile.clear(); @profile for i in 1:10000000 foo[bob] = joe; end; Profile.print()
exit()
Profile.clear(); @profile for i in 1:10000000 foo[800:820] =  800:820; end; Profile.print()
bob=800:820; joe = RLEVector(800:820); Profile.clear(); @profile for i in 1:10000000 foo[bob] = joe; end; Profile.print()
bob=800:820; joe = RLEVector(800:820); Profile.clear(); @profile for i in 1:10000000 foo[bob] = joe; end; Profile.print()
exit()
bob=800:820; joe = RLEVector(800:820); Profile.clear(); @profile for i in 1:10000000 foo[bob] = joe; end; Profile.print()
bob=800:820; joe = RLEVector(800:820); Profile.clear(); @profile for i in 1:10000000 foo[bob] = 99; end; Profile.print()
 @time for i in 1:10000000 foo[bob] = 99; end
 @time for i in 1:10000000 foo[bob] = joe; end
 @time for i in 1:10000000 foo[bob] = joe; end
 @time for i in 1:10000000 foo[bob] = joe; end
Profile.clear(); @profile for i in 1:10000000 foo[800:820] =  800:820; end; Profile.print()
Profile.clear(); @profile for i in 1:10000000 foo[800:820] =  800:820; end; Profile.print()
@timeit setindex!(foo, 800:820, 800:820)
@timeit setindex!(foo, 800:820, 800:820)
@timeit setindex!(foo, 800:820, 800:820)
exit()
Pkg.test("RLEVectors")
bdf
@timeit coverage(gr)
@timeit coverage(gr)
bdf
bdf[:,11:end]
Profile.clear(); @profile for i in 1:10000000 foo[800:820] =  800:820; end; Profile.print()
bob=800:820; joe= RLEVectors(bob); Profile.clear(); @profile for i in 1:10000000 foo[bob] = joe; end; Profile.print()
bob=800:820; joe= RLEVector(bob); Profile.clear(); @profile for i in 1:10000000 foo[bob] = joe; end; Profile.print()
bob=800:820; joe= RLEVector(bob); Profile.clear(); @profile for i in 1:10000000 foo[bob] = joe; end; Profile.print()
bob=800:820; joe= RLEVector(bob); Profile.clear(); @profile for i in 1:10000000 foo[bob] = joe; end; Profile.print()
last([])
@timeit coverage(gr)
x = RLEVector([1,1,2,2,3,3,4,4,5,5])
x
x[3]
x[1]
collect(x)
x[1]
x[2]
x[3]
x[4]
x[5]
x[6]
x[7]
x[8]
x[9]
x[10]
x[11]
length(x)
Pkg.test("RLEVectors")
x = RLEVector([1,1,2,2,3,3,4,4,5,5])
x[2:5]
x[2:5]
x[2:5]
x[2:5]
x[2:5]
x
Pkg.test("RLEVectors")
collect(x)
x
x[5]
x[5:7]
collect(x[5:7])
x[5:7]
x = RLEVector([1,1,2,2,3,3,4,4,5,5])
ind = 5:7
x
run_indices
offset
v
e
x
v
e
e
ind2runcontext
?ind2runcontext
x 
indices=5:7
e
v
i
x
v
e
x
x
v
e
v
e
x = RLEVector([1,1,2,2,3,3,4,4,5,5])
x[5:7]
x[5:7]
x[5:7]
Pkg.test("RLEVectors")
Pkg.test("RLEVectors")
@timeit foo[801:900] = 1:100
exit()
Pkg.test("RLEVectors")
bdf[:,11:end]
bdf[:,11:end]
bdf
bdf[:,8:end]
8.29 /  .57
x = RLEVector([1,1,2,2,3,3,4,4,5,5])
x[2:4] = 99
x
x = RLEVector([1,1,2,2,3,3,4,4,5,5])
x[2:6] = 99
x
x = RLEVector([1,1,2,2,3,3,4,4,5,5])
x[2:6] = 99
x
x = RLEVector([1,1,2,2,3,3,4,4,5,5])
x[2:7] = 99
x
Pkg.test("RLEVectors")
x
x
x
value = 4
indices = 9:12
run_right
x
run_left
nrun_out
run_left
run_right
x
x
run_left
((nrun_x - run_right) + 1)
nrun_value
x
value
run_right
nrun_value
right_run
run_right
x = RLEVector([1,1,2,2,3,3,4,4,5,5])
x[2:7] = 99
x
x
x
x
exit()
x
x
value
value = 99
value = 4
indices = 9:12
x
run_remainder_right == 0
run_right < nrun_x && value == x.runvalues[run_right]
x
x
i_right
run_right <= nrun_x && value == x.runvalues[run_right]
x
x
exit()
