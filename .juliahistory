using RLEVectors
exit()
using RleVector
using RleVectors
using RLEVectors
VERSION < v"0.6.0"
x = RLEVector([1,1,1])
@code_typed +(x,x)
import Base. + 
import Base.+ 
bdf
bdf[:,11:20]
@edit +(x,x)
@code_typed +(x,x)
@code_warntype +(x,x)
@code_warntype +(x,4)
@code_warntype +(4,x,4)
@code_warntype +(4,x
)
@code_warntype +(4,x)
@code_warntype +(x,4)
exit()
using RLEVectors
x = RLEVector([1,1,1])
@code_typed +(x,4)
@code_typed +(4,)
@code_typed +(4,x)
@code_typed +(4,x)
@code_typed +(x,4)
@code_typed +(4,x)
+(4,x)
+(x,4)
extrema(x)
first(x)
unique(x)
@code_typed unique(x)
!x
x = RLEVector([true,true,false])
!x
!x
!x
.!x
? .! == 
? .!== 
? !== 
any(x)
all(x)
exit()
using RLEVectors
Pkg.test("RLEVectors")
exit()
using RLEVectors
x = [1,1,2,2,2,3]
x
y = RLEVector(x)
out
next
@which iterate(x)
)
x
x
next
out
?push!
push!(out, 4)
out
import Base.eltype
@code_lowered iterate(x)
@code_lowered iterate(x, (1,1))
@code_warntype iterate(x, (1,1))
@code_warntype iterate(x, (1,1))
x
ind2runs(x, 3:4)
ind2run(x, 3:4)
ind2run(x, 3:5)
timings
timings[:coverage]
import GenomicVectors.coverage
@timeit coverage(gr)
@timeit coverage(gr)
@timeit coverage(gr)
Profile.clear()
@profile for i in 1:100 coverage(gr) end
Profile.print()
x
collect(x)
ind2run(x, 3)
ind2run(x, 100)
first(10:9)
x[2:3]
x[2:3]
x
collect(x)
collect(x)[2:3]
x[4:6]
collect(x)[4:6]
@timeit coverage(gr)
@timeit gr[900:920]
Profile.clear()
@profile for i in 1:100 coverage(gr) end
coverage(gr)
@time coverage(gr)
Profile.clear()
@profile coverage(gr)
Profile.print()
exit()
using RLEVectors
using GenomicVectors
@time coverage(gr)
@timeit coverage(gr)
@timeit coverage(gr)
Profile.clear()
@profile for i in 1:100 coverage(gr) end; Profile.print()
@timeit coverage(gr)
import GenomicFeatures.coverage
@timeit coverage(gr)
eachrange(gr)
sort(eachrange(gr))
sort(collect(eachrange(gr)))
@timeit coverage(gr)
Profile.clear()
coverage(gr)
@profile for i in 1:100 coverage(gr) end; Profile.print()
@timeit coverage(gr)
Profile.clear(); @profile for i in 1:100 coverage(gr) end; Profile.print()
foo=first(eachrange(gr))
foo
1:10 + 1
(1:10) + 1
(s,e) = foo
s
e
s:e
(s,e) = first(eachrange(gr))
coverage(gr)
x[1:4]=12
x=RLEVector([1,1,1,1,1,2,2,2,2,4])
x[1:4]=12
coverage(gr)
coverage(gr)
coverage(gr)
coverage(gr)
gr
coverage(gr)
@which setindex!(x,4,1:3)
@which setindex!(x,4,(1,3))
setindex!(x,4,(1,3))
x
coverage(gr)
coverage(gr)
exit()
using GenomicVectors
@timeit coverage(gr)
Profile.clear()
@profile for i in 1:100 coverage(gr) end; Profile.print()
@timeit coverage(gr)
import GenomicFeatures.coverage
@timeit coverage(gr)
using RLEVectors
@timeit coverage(gr)
coverage(gr)
Profile.clear()
@profile for i in 1:100 coverage(gr) end; Profile.print()
Profile.clear()
@profile for i in 1:100 coverage(gr) end; Profile.print()
coverage(gr)
@timeit coverage(gr)
x
x = RLEVector([1,1,1,2,2,2,7,7,7,8])
@which setindex!(x,4,1:3)
@which setindex!(x,[1,1,1],1:3)
@which setindex!(x,RLEVector(1,1,1]),1:3)
@which setindex!(x,RLEVector([1,1,1]),1:3)
@which .+(x,1)
@which +.(x,1)
@which broadcast(x,+,1)
@which setindex!(x,[1,1,1],1:3)
coverage(gr)
@timeit coverage(gr)
1.5/8
?splice!
exit()
coverage(gr)
@timeit coverage(gr)
x = RLEVector(collect(1:10))
using RLEVectors
x = RLEVector(collect(1:10))
x[3:3] = [99,100]
x
length(x)
x = RLEVector(collect(1:10))
length(x)
x[3:2] = [99,100]
length(x)
x
@timeit coverage(gr)
x = 1:10
x[4:6]
x = RLEVector(1:10)
x = RLEVector(collect(1:10))
ind2run(x,4:5)
x = RLEVector([1,1,2,2,3,3])
ind2run(x,4:5)
x[[4,5]]
x[4:5]
ind2run(x,4:5)
ind2runcontext(x,4:5)
?ind2runcontext
collect(x)
?splice!
?push!
exit()
using RLEVectors
?ind2run
?ind2runcontext
?ind2runcontext
ind2run(x, 4:5)
x =  RLEVector(collect(1:10))
ind2run(x, 4:5)
inds = 4:5
last(inds)
x[4:6]
function Base.getindex(rle::RLEVector, ind::UnitRange)
    run_indices = ind2run(rle, ind)
    vals = values(rle, run_indices)
    ends = runends(rle, run_indices)
    ends[end] = last(inds)
    ends = ends - (first(inds) - 1)
    RLEVector(vals, ends)
end

x[4:6]
exit()
using RLEVectors
x =  RLEVector(collect(1:10))
x[4:6]
x[4:6]
ends(x)
x[4:6]
x[4:6]
x[4:6]
x[4:6]
x = RLEVector([1,1,2,2,3,3,4,4,5,5])
x[4:5]
x[4:6]
@timeit coverage(gr)
coverage(gr)
exit()
using RLEVectors
x = RLEVector([1,1,2,2,3,3,4,4,5,5])
?Union
import Base.splice!
x
splice!(x, 4, 99)
exit()
using RLEVectors
x = RLEVector([1,1,2,2,3,3,4,4,5,5])
splice!(x, 4, 98)
splice!(x, 4:5, 98)
splice!(x, 4:5, 98)
splice!(x, 4:5, 98:99)
splice!(x, 4:5, [99,99])
exit()
using RLEVectors
x = RLEVector([1,1,2,2,3,3,4,4,5,5])
splice!(x, 4:5, [99,99])
x
splice!(x, 2, [99,99])
x
coverage(gr)
gr
exit()
coverage(gr)
import GenomicFeatures.coverage
coverage(gr)
widths(gr)[1]
coverage(gr)
(s,e) = first(eachrange(gr))
out[r]
@which setindex!(out, r, out[r])
foo = out[r]
foo
@which setindex!(out, r, foo)
setindex!(out, r, foo)
out
typeof(out)
typeof(foo)
@which setindex!(out, r, foo)
@which splice!(out, r, foo)
splice!(out, r, foo)
splice!(out, r, foo)
splice!(out, r, foo)
out
@which splice!(out, foo, r)
@which setindex!(out, foo, r)
index = r
ins = out[r] + 1
x
x = ou
x = out
ins
ins
ins_ends
ins_vals
out
r
out[r]
foo = out[r] + 1
out[r] = foo
out
all_ranges = collect(eachrange(gr))
(s,e) = all_ranges[1]
out
out
print(out)
coverage(gr)
out
print(out)
coverage(gr)
coverage(gr)
coverage(gr)
out
r
@which splice!(out, r, out[r] + 1)
out
(s,e) = all_ranges[1]
x = out
r = s:e
index = r
ins = out[r] + 1
ins
length(ins)
length(index)
i_left > i_right # Insert without removing
current
3080432725 + 3326
length(out)
3080432676 + 3375
[[4,5,6]; [12]]
vcat([4,5,6], [12])
ins_ends
ins
r
coverage(gr)
coverage(gr)
coverage(gr)
exit()
coverage(gr)
@timeit coverage(gr)
