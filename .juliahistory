using RLEVectors
exit()
using RleVector
using RleVectors
using RLEVectors
VERSION < v"0.6.0"
x = RLEVector([1,1,1])
@code_typed +(x,x)
import Base. + 
import Base.+ 
bdf
bdf[:,11:20]
@edit +(x,x)
@code_typed +(x,x)
@code_warntype +(x,x)
@code_warntype +(x,4)
@code_warntype +(4,x,4)
@code_warntype +(4,x
)
@code_warntype +(4,x)
@code_warntype +(x,4)
exit()
using RLEVectors
x = RLEVector([1,1,1])
@code_typed +(x,4)
@code_typed +(4,)
@code_typed +(4,x)
@code_typed +(4,x)
@code_typed +(x,4)
@code_typed +(4,x)
+(4,x)
+(x,4)
extrema(x)
first(x)
unique(x)
@code_typed unique(x)
!x
x = RLEVector([true,true,false])
!x
!x
!x
.!x
? .! == 
? .!== 
? !== 
any(x)
all(x)
exit()
using RLEVectors
Pkg.test("RLEVectors")
exit()
using RLEVectors
x = [1,1,2,2,2,3]
x
y = RLEVector(x)
out
next
@which iterate(x)
)
x
x
next
out
?push!
push!(out, 4)
out
import Base.eltype
@code_lowered iterate(x)
@code_lowered iterate(x, (1,1))
@code_warntype iterate(x, (1,1))
@code_warntype iterate(x, (1,1))
x
ind2runs(x, 3:4)
ind2run(x, 3:4)
ind2run(x, 3:5)
timings
timings[:coverage]
import GenomicVectors.coverage
@timeit coverage(gr)
@timeit coverage(gr)
@timeit coverage(gr)
Profile.clear()
@profile for i in 1:100 coverage(gr) end
Profile.print()
x
collect(x)
ind2run(x, 3)
ind2run(x, 100)
first(10:9)
x[2:3]
x[2:3]
x
collect(x)
collect(x)[2:3]
x[4:6]
collect(x)[4:6]
@timeit coverage(gr)
@timeit gr[900:920]
Profile.clear()
@profile for i in 1:100 coverage(gr) end
coverage(gr)
@time coverage(gr)
Profile.clear()
@profile coverage(gr)
Profile.print()
exit()
